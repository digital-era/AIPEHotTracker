# .github/workflows/main.yml
# 完整的工作流配置文件，用于定时获取ETF数据并提交回仓库

name: Scheduled Data Refresh

on:
  # 1. 定时触发 (Scheduled Trigger)
  # 使用 schedule 来定时触发。注意：GitHub Actions 的 cron 时间是 UTC 时间。
  # 北京时间 (UTC+8) 比 UTC 时间早 8 小时。
  #
  # 新需求：北京时间 周一到周五 9:30 - 15:00，每 15 分钟一次
  #
  # 北京时间 9:30 -> UTC 1:30
  # 北京时间 15:00 -> UTC 7:00
  #
  # cron 表达式可以指定多个值，用逗号分隔。
  # '*/15' 表示每15分钟。但我们需要限制在特定的小时范围内。
  schedule:
    # 规则 1: UTC 1 点的 30分 和 45分 (对应北京时间 9:30, 9:45)
    - cron: '30,45 1 * * 1-5'
    
    # 规则 2: UTC 2点 到 6点，每 15 分钟一次 (0, 15, 30, 45)
    # 这对应北京时间 10:00 - 14:45
    - cron: '0,15,30,45 2-6 * * 1-5'
    
    # 规则 3: UTC 7 点到 8点，每 15 分钟一次 (0, 15, 30, 45) (对应北京时间 15:00开始)
    - cron: '0,15,30,45 7-8 * * 1-5'

  # 2. 手动触发 (Manual Trigger)
  # 允许在 GitHub Actions 页面手动运行此工作流，方便测试。
  workflow_dispatch:

jobs:
  build-and-commit:
    name: Build Data and Commit to Repo
    runs-on: ubuntu-latest

    # 为此作业授予对仓库内容的写权限，以便可以 git push
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出仓库代码
      # actions/checkout@v4 是获取仓库最新代码的标准操作。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      # actions/setup-python@v5 可以方便地配置指定版本的 Python。
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # 你可以根据需要更改 Python 版本

      # 步骤 3: 安装依赖
      # 这是最佳实践：从 requirements.txt 文件安装所有依赖。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 步骤 4: 运行数据获取脚本
      # 执行你的核心 Python 脚本来生成数据文件。
      - name: Run data fetching script
        run: python api/index.py

      # 步骤 5: 提交并推送变动
      # 这个步骤会自动将生成的数据文件提交回你的 GitHub 仓库。
      - name: Commit and push if changed
        run: |
          # 配置 git 用户信息，这样提交记录会显示是由 actions bot 完成的
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 将 data 目录下的所有变动添加到暂存区
          # 如果你的 JSON 文件在其他地方，请修改此路径
          git add data/
          
          # 检查是否有文件变动。如果有，则创建提交并推送到 main 分支
          # '|| exit 0' 这个技巧确保在没有文件变动时，命令不会失败并导致整个工作流失败
          git diff --staged --quiet || (git commit -m "chore(data): Update ETF data" && git push)
          
          echo "Data commit process finished."
          # Trivial change to re-register the workflow。
          # Trivial change to re-register the workflow。
